{"version":3,"file":"api.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/api.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+C,eAAe,CAAC,CAAA;AAC/D,qBAAwD,eAAe,CAAC,CAAA;AACxE,6BAA4B,gBAAgB,CAAC,CAAA;AAC7C,8BAAwB,iBAAiB,CAAC,CAAA;AAG1C;IAEI,aAAqB,IAAU,EACxB,WAAwB,EACxB,OAAgB;QAFF,SAAI,GAAJ,IAAI,CAAM;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,YAAO,GAAP,OAAO,CAAS;IAAG,CAAC;IAE3B,6BAAe,GAAf;QACH,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5E,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,OAAO,CAAC;IACZ,CAAC;IAED,iBAAG,GAAH,UAAI,GAAG,EAAE,aAAkB;QAAlB,6BAAkB,GAAlB,oBAAkB;QAC9B,IAAI,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,aAAa,CAAC;YACd,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,CAAA;QACtC,IAAI;YACA,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;QAExC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,oBAAM,GAAN,UAAO,GAAG;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,kBAAI,GAAJ,UAAK,GAAG,EAAE,IAAI,EAAE,aAAkB;QAAlB,6BAAkB,GAAlB,oBAAkB;QACrC,IAAI,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,aAAa,CAAC;YACd,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,CAAA;QACtC,IAAI;YACA,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;QAExC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,mBAAK,GAAL,UAAM,GAAG,EAAE,IAAI;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IAC/E,CAAC;IA3CL;QAAC,iBAAU,EAAE;;WAAA;IA4Cb,UAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,WAAG,MA2Cf,CAAA","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { AuthService } from './auth.service';\nimport { Backend } from './backend.class';\n\n@Injectable()\nexport class Api {\n\n    constructor (private http: Http,\n\t\t private authService: AuthService,\n\t\t private backend: Backend) {}\n    \n    generateOptions() {\n\tvar headers = new Headers();\n\theaders.append('Content-Type', 'application/json');\n\theaders.append('Accept', 'application/json');\n\tif (this.authService.isLoggedIn)\n\t    headers.append('Authorization', 'token ' + this.authService.getToken());\n\tvar options = new RequestOptions({ headers: headers });\n\treturn options;\n    }\n    \n    get(url, with_api_path=true) {\n\tlet dest;\n\tif (with_api_path)\n\t    dest = this.backend.getUrl() + url\n\telse\n\t    dest = this.backend.getHost() + url;\n\t\n\treturn this.http.get(dest, this.generateOptions());\n    }\n\n    delete(url) {\t\n\treturn this.http.delete(this.backend.getUrl() + url, this.generateOptions());\n    }\n    \n    post(url, body, with_api_path=true) {\n\tlet dest;\n\tif (with_api_path)\n\t    dest = this.backend.getUrl() + url\n\telse\n\t    dest = this.backend.getHost() + url;\n\n\treturn this.http.post(dest, body, this.generateOptions());\n    }\n\n    patch(url, body) {\n\treturn this.http.patch(this.backend.getUrl() + url, body, this.generateOptions());\n    }\n}\n"]}
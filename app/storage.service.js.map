{"version":3,"file":"storage.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/storage.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAiD,eAAe,CAAC,CAAA;AAKjE;IAKI;QAHA,YAAO,GAAG,EAAE,CAAA;QACF,YAAO,GAAG,IAAI,mBAAY,EAAE,CAAC;IAEvB,CAAC;IAEjB,8BAAK,GAAL,UAAM,MAAM,EAAE,GAAG,EAAE,KAAK;QAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAA;QAC7B,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC,CAAC;IAC7D,CAAC;IAED,4BAAG,GAAH,UAAI,MAAM,EAAE,GAAG,EAAE,GAAG;QACvB,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;IAED,+BAAM,GAAN,UAAO,MAAM,EAAE,GAAG;QACrB,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC;QACX,CAAC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAlCD;QAAC,aAAM,EAAE;;mDAAA;IAJb;QAAC,iBAAU,EAAE;;sBAAA;IAyCb,qBAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,sBAAc,iBAwC1B,CAAA","sourcesContent":["import { Injectable, Output, EventEmitter } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class StorageService {\n\n    storage = {}\n    @Output() updated = new EventEmitter();\n    \n    constructor () {}\n\n    store(client, key, value) {\n\tif (!(client in this.storage)) {\n\t    this.storage[client] = {}\n\t}\n\tthis.storage[client][key] = value;\n\tthis.updated.emit({\"client\":client, \"key\": key, \"value\":value});\n    }\n\n    get(client, key, def) {\t\n\tif (!(client in this.storage)) {\n\t    return def;\n\t}\n\n\tif (!(key in this.storage[client])) {\n\t    return def;\n\t}\n\n\treturn this.storage[client][key]\n    }\n\n    delete(client, key) {\n\tif (!(client in this.storage)) {\n\t    return;\n\t}\n\n\tif (!(key in this.storage[client])) {\n\t    return;\n\t}\n\n\tdelete this.storage[client][key];\n    }\n\n    \n}\n"]}
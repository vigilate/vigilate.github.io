{"version":3,"file":"auth.guard.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/auth.guard.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAAiF,iBAAiB,CAAC,CAAA;AACnG,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,6BAA4B,gBAAgB,CAAC,CAAA;AAC7C,6BAA4B,gBAAgB,CAAC,CAAA;AAC7C,gCAA+B,mBAC/B,CAAC,CADiD;AAClD,mCAAkC,sBAAsB,CAAC,CAAA;AACzD,QAAO,kBAAkB,CAAC,CAAA;AAG1B;IACI,mBAAoB,WAAwB,EACtC,WAAwB,EACxB,MAAc,EACd,iBAAoC,EACpC,cAA8B;QAJhB,gBAAW,GAAX,WAAW,CAAa;QACtC,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAGxC,+BAAW,GAAX,UAAY,KAAK,EAAE,KAAK;QAAxB,iBA+BC;QA9BJ,IAAI,WAAW,GAAG,WAAW,CAAC;QAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC1C,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE5C,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,OAAO,CAC/C,UAAA,IAAI;gBACA,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;oBACjB,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CACjC;wBACH,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAA;wBAC7B,MAAM,CAAC,IAAI,CAAC;oBACT,CAAC,CAAC,CAAC;gBACJ,CAAC;gBACD,IAAI,CACJ,CAAC;oBACJ,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;oBAC5B,MAAM,CAAC,uBAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;gBACzB,CAAC;YACL,CAAC,CAAC;iBACD,KAAK,CAAC;gBACH,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBAC5B,MAAM,CAAC,uBAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC;IACV,CAAC;IAED,6BAAS,GAAT,UAAU,WAAW;QACxB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9B,CAAC;IA7CL;QAAC,iBAAU,EAAE;;iBAAA;IA8Cb,gBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,iBAAS,YA6CrB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthService } from './auth.service';\nimport { UserService } from './user.service';\nimport { StorageService } from './storage.service'\nimport { BackgroundService } from './background.service';\nimport './rxjs-operators';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n    constructor(private authService: AuthService,\n\t\tprivate userService: UserService,\n\t\tprivate router: Router,\n\t\tprivate backgroundService: BackgroundService,\n\t\tprivate storageService: StorageService) {}\n\n    \n    canActivate(route, state) : Observable<boolean> | boolean {\n\tlet redirect_to = \"dashboard\";\n\tif (route.urlSegments && route.urlSegments[0])\n\t    redirect_to = route.urlSegments[0].path;\n\n\tthis.storageService.store(\"AuthGuard\", \"current_page\", redirect_to);\n\tif (this.authService.isLoggedIn && this.userService.user)\n\t    return true;\n\tif (this.authService.token != \"\") {\n\t    return this.authService.checkToken().flatMap(\n\t\tdata => {\n\t\t    if (data.ok) {\n\t\t\treturn this.userService.getUser().map(\n\t\t\t    () => {\n\t\t\t\tthis.backgroundService.init()\n\t\t\t\treturn true;\n\t\t\t    });\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tthis.goToLogin(redirect_to);\n\t\t\treturn Observable.of(false);\n\t\t    }\n\t\t})\n\t\t.catch(() => {\n\t\t    this.goToLogin(redirect_to);\n\t\t    return Observable.of(false);\n\t\t});\n\t}\n\tthis.goToLogin(redirect_to);\n\treturn false;\n    }\n\n    goToLogin(redirect_to) {\n\tthis.storageService.store(\"AuthGuard\", \"redirect\", redirect_to);\n\tthis.router.navigate(['/login']);\n    }\n}\n"]}
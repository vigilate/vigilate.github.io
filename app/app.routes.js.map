{"version":3,"file":"app.routes.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/app.routes.ts"],"names":[],"mappings":";AAAA,uBAA4C,iBAAiB,CAAC,CAAA;AAE9D,oCAAmC,uBACnC,CAAC,CADyD;AAC1D,gCAA+B,mBAC/B,CAAC,CADiD;AAClD,iCAAgC,oBAChC,CAAC,CADmD;AACpD,mCAAkC,sBAClC,CAAC,CADuD;AACxD,0CAAwC,6BACxC,CAAC,CADoE;AACrE,2BAA0B,cAC1B,CAAC,CADuC;AACxC,6BAA4B,gBAC5B,CAAC,CAD2C;AAC5C,iCAAgC,oBAAoB,CAAC,CAAA;AACrD,6BAA4B,gBAAgB,CAAC,CAAA;AAC7C,yCAAiC,4BACjC,CAAC,CAD4D;AAC7D,+BAA8B,kBAAkB,CAAC,CAAA;AACjD,gCAA+B,mBAAmB,CAAC,CAAA;AACnD,mCAAkC,sBAAsB,CAAC,CAAA;AACzD,iCAAgC,oBAAoB,CAAC,CAAA;AACrD,iCAAgC,oBAAoB,CAAC,CAAA;AACrD,mCAAkC,sBAAsB,CAAC,CAAA;AACzD,mCAAkC,sBAAsB,CAAC,CAAA;AACzD,wCAAsC,2BAA2B,CAAC,CAAA;AAClE,0CAAwC,6BAA6B,CAAC,CAAA;AACtE,8BAAwB,iBACxB,CAAC,CADwC;AACzC,4BAAoB,eACpB,CAAC,CADkC;AACnC,sCAAqC,yBAAyB,CAAC,CAAA;AAC/D,+BAA8B,kBAAkB,CAAC,CAAA;AACjD,8BAA6B,iBAAiB,CAAC,CAAA;AAElC,cAAM,GAAiB;IAChC,EAAE,IAAI,EAAE,YAAY;QAClB,SAAS,EAAE,wCAAkB;QAC7B,KAAK,EAAC,IAAI;QACV,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAC;IAC3B,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,gCAAc,EAAE;IAC7C,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,kCAAe,EAAE;IAC/C,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,sCAAiB,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;IAC7E,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,mDAAuB,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;IACvF,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,kCAAe,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;IACzE,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,+CAAqB,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;IACnF,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,sCAAiB,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;IAC7E,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,sCAAiB,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;IAC7E,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,mDAAuB,EAAE,WAAW,EAAE,CAAC,sBAAS,CAAC,EAAE;CAC1F,CAAC;AAEW,4BAAoB,GAAG;IAChC,sBAAa,CAAC,cAAM,CAAC;IACrB,CAAC,sBAAS,EAAE,0BAAW,EAAE,kCAAe,EAAE,0BAAW,EAAE,2CAAgB,EAAE,uBAAO,EAAE,8BAAa,EAAE,gCAAc,EAAE,sCAAiB,EAAE,kCAAe,EAAE,iBAAG,EAAE,4CAAoB,EAAE,8BAAa,EAAE,4BAAY,CAAC;CAC/M,CAAC","sourcesContent":["import { provideRouter, RouterConfig } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard.component'\nimport { LoginComponent } from './login.component'\nimport { LogoutComponent } from './logout.component'\nimport { ProgramsComponent } from './programs.component'\nimport { ProgramsDetailComponent } from './programs-detail.component'\nimport { AuthGuard } from './auth.guard'\nimport { AuthService } from './auth.service'\nimport { ProgramsService } from './programs.service';\nimport { UserService } from './user.service';\nimport { HttpServiceError } from './http-service-error.class'\nimport { AlertsService } from './alerts.service';\nimport { StorageService } from './storage.service';\nimport { BackgroundService } from './background.service';\nimport { StationsService } from './stations.service';\nimport { AlertsComponent } from './alerts.component';\nimport { StationsComponent } from './stations.component';\nimport { SettingsComponent } from './settings.component';\nimport { AlertsDetailComponent } from './alerts-detail.component';\nimport { StationsDetailComponent } from './stations-detail.component';\nimport { Backend } from './backend.class'\nimport { Api } from './api.service'\nimport { NotificationsService } from './notifications.service';\nimport { StripeService } from './stripe.service';\nimport { PlansService } from './plans.service';\n\nexport const routes: RouterConfig = [\n    { path: '/dashboard',\n      component: DashboardComponent,\n      index:true,\n      canActivate: [AuthGuard]},\n    { path: '/login', component: LoginComponent },\n    { path: '/logout', component: LogoutComponent },\n    { path: '/programs', component: ProgramsComponent, canActivate: [AuthGuard] },\n    { path: '/programs/:id', component: ProgramsDetailComponent, canActivate: [AuthGuard] },\n    { path: '/alerts', component: AlertsComponent, canActivate: [AuthGuard] },\n    { path: '/alerts/:id', component: AlertsDetailComponent, canActivate: [AuthGuard] },\n    { path: '/settings', component: SettingsComponent, canActivate: [AuthGuard] },\n    { path: '/stations', component: StationsComponent, canActivate: [AuthGuard] },\n    { path: '/stations/:id', component: StationsDetailComponent, canActivate: [AuthGuard] },\n];\n\nexport const APP_ROUTER_PROVIDERS = [\n    provideRouter(routes),\n    [AuthGuard, AuthService, ProgramsService, UserService, HttpServiceError, Backend, AlertsService, StorageService, BackgroundService, StationsService, Api, NotificationsService, StripeService, PlansService]\n];\n"]}
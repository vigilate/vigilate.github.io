{"version":3,"file":"stripe.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/stripe.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Output, EventEmitter } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { HttpServiceError } from './http-service-error.class'\nimport { Api } from './api.service';\nimport { UserService } from './user.service';\nimport { StationsService } from './stations.service';\n\n@Injectable()\nexport class StripeService {\n\n    private amount = 0;\n    private description = \"\";\n    private id_plan = 0;\n    private handler = null;\n    \n    constructor (private api: Api,\n\t\t private httpServiceError: HttpServiceError,\n\t\t private userService: UserService,\n\t\t private stationsService: StationsService\n\t\t) {\n\tthis.configure();\n    }\n\n    configure() {\n\tif (!(\"StripeCheckout\" in window)) {\n\t    console.log(\"StipeCheckout is not present\");\n\t    return;\n\t}\n\tthis.handler = window[\"StripeCheckout\"].configure({ \n\t    key: 'pk_test_P21OD1NRP68DvjfKeLLvnmxS',\n\t    image: '/foundation/img/vigilate_logo.png',\n\t    locale: 'auto',\n\t    \n\t    token: (token) => this.sendInfoBackend(token)\n\t});\n    }\n    \n    setProduct(id_plan, amount, description) {\n\tthis.id_plan = id_plan;\n\tthis.amount = Math.round(amount);\n\tthis.description = description;\n\tconsole.log(this.amount);\n    }\n\n    checkout() {\n\tif (this.id_plan == 0) {\n\t    this.sendInfoBackend(\"\")\n\t    this.userService.getUser().subscribe();\n\t    return;\n\t}\n\tif (this.handler == null) {\n\t    console.log(\"stripe is not loaded\")\n\t    return;\n\t}\n\t    \n\tthis.handler.open({\n\t    name: 'Vigilate',\n\t    description: this.description,\n\t    currency: 'EUR',\n\t    amount: this.amount\n\t});\n    }\n\n    sendInfoBackend(token) {\n\n\tvar body = JSON.stringify({ token:token.id });\n\n\tthis.api.post(\"/checkout/\" + this.id_plan + \"/\", body, false).subscribe(\n\t\tdata => {\n\t\t    console.log(data);\n\t\t    this.userService.getUser().subscribe();\n\t\t    this.stationsService.discardCache();\n\t\t},\n\t\terror => {\n\t\t    console.log(error);\n\t\t}\n\t    );\n    }\n    \n}\n"]}
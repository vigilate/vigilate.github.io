{"version":3,"file":"exception.class.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/exception.class.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAAsD,eAAe,CAAC,CAAA;AACtE,uBAAuB,iBAAiB,CAAC,CAAA;AACzC,6BAA4B,gBAC5B,CAAC,CAD2C;AAC5C,mCAAkC,sBAIlC,CAAC,CAJuD;AAExD,4DAA4D;AAE5D;IAAA;QACI,QAAG,GAAG,EAAE,CAAC;IAKb,CAAC;IAJG,0BAAG,GAAH,UAAI,CAAM,IAAU,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,+BAAQ,GAAR,UAAS,CAAM,IAAU,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,+BAAQ,GAAR,UAAS,CAAM,IAAU,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,kCAAW,GAAX,cAAe,CAAC;;IACpB,mBAAC;AAAD,CAAC,AAND,IAMC;AANY,oBAAY,eAMxB,CAAA;AAGD;IAAwC,sCAAgB;IAKpD,4BAAoB,QAAkB;QACzC,kBAAM,IAAI,YAAY,EAAE,EAAE,IAAI,CAAC,CAAC;QADT,aAAQ,GAAR,QAAQ,CAAU;IAEtC,CAAC;IAED,iCAAI,GAAJ,UAAK,KAAK,EAAE,UAAiB,EAAE,MAAa;QAAhC,0BAAiB,GAAjB,iBAAiB;QAAE,sBAAa,GAAb,aAAa;QAC/C,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,KAAK,IAAI,iBAAiB,CAAC,CAC/B,CAAC;YACG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACtC,CAAC;QACD,IAAI;YACA,gBAAK,CAAC,IAAI,YAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAEO,4CAAe,GAAvB;QACH,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;YACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAM,CAAC,CAAC;QAC5C,CAAC;QACD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA,CAAC;YAClB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAAW,CAAC,CAAC;QACtD,CAAC;QACD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA,CAAC;YACxB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sCAAiB,CAAC,CAAC;QAClE,CAAC;IACE,CAAC;IA9BL;QAAC,iBAAU,EAAE;;0BAAA;IA+Bb,yBAAC;AAAD,CAAC,AA9BD,CAAwC,uBAAgB,GA8BvD;AA9BY,0BAAkB,qBA8B9B,CAAA","sourcesContent":["import {Injectable, ExceptionHandler, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service'\nimport { BackgroundService } from './background.service'\n\n// Inspired from http://stackoverflow.com/questions/37592078\n\nexport class _ArrayLogger {\n    res = [];\n    log(s: any): void { this.res.push(s); }\n    logError(s: any): void { this.res.push(s); }\n    logGroup(s: any): void { this.res.push(s); }\n    logGroupEnd() {};\n}\n\n@Injectable()\nexport class MyExceptionHandler extends ExceptionHandler {\n    private router:Router;\n    private authService:AuthService;\n    private backgroundService:BackgroundService;\n    \n    constructor(private injector: Injector) {\n\tsuper(new _ArrayLogger(), true);\n    }\n    \n    call(error, stackTrace = null, reason = null) {\n\tthis.getDependencies();\n\tif (error == \"NeedToReconnect\")\n\t{\n\t    this.router.navigate(['/logout']);\n\t}\n\telse\n\t    super.call(error, stackTrace, reason);\n    }\n\n    private getDependencies(){\n\tif(!this.router){\n\t    this.router = this.injector.get(Router);\n\t}\n\tif(!this.authService){\n\t    this.authService = this.injector.get(AuthService);\n\t}\n\tif(!this.backgroundService){\n\t    this.backgroundService = this.injector.get(BackgroundService);\n\t}\n    }\n}\n"]}
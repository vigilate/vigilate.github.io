{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { User } from './user.model';\nimport { HttpServiceError } from './http-service-error.class'\nimport { Backend } from './backend.class'\n\n@Injectable()\nexport class AuthService {\n    checkLoggedObservable: Observable<any> = null;\n    isLoggedIn: boolean = false;\n    isChecking: boolean = false;\n    token = localStorage.getItem(\"token\");\n    triedToConnect = false;\n    \n    constructor (private http: Http,\n\t\t private httpServiceError: HttpServiceError,\n\t\t private backend: Backend) {}\n\n    private url = \"/sessions/\";\n\n    checkToken() {\n\tthis.triedToConnect = true;\n\tif (!this.isChecking || this.checkLoggedObservable != null) {\n\t    this.isChecking = true;\n\t    var headers = new Headers();\n\t    headers.append('Content-Type', 'application/json');\n\t    headers.append('Accept', 'application/json');\n\t    headers.append('Authorization', 'token ' + this.token);\n\n\t    this.checkLoggedObservable = this.http.get(this.backend.getUrl() + this.url, new RequestOptions({ headers: headers }))\n\t\t.do(\n\t\t    data => {\n\t\t\tthis.isLoggedIn = data.ok;\n\t\t\tthis.isChecking = false;\n\t\t    })\n\t\t.catch(\n\t\t    err => {\n\t\t\tthis.isLoggedIn = false;\n\t\t\tthis.isChecking = false;\n\t\t\treturn this.httpServiceError.handleError(err);\n\t\t    });\n\t}\n\treturn this.checkLoggedObservable;\n    }\n    \n    login(user, pwd): Observable<User> {\n\n\tvar headers = new Headers();\n\tvar body = JSON.stringify({ email:user, password:pwd });\n\theaders.append('Content-Type', 'application/json');\n\theaders.append('Accept', 'application/json');\n\t\n\treturn this.http.post(this.backend.getUrl() + this.url, body, new RequestOptions({ headers: headers }))\n\t    .do(data => {\n\t\tthis.isLoggedIn = data.ok;\n\t    } ).map((data) => data.json()).catch(this.httpServiceError.handleError).do((data) => {\n\t\tif (this.isLoggedIn) {\n\t\t    this.token = data.token;\n\t\t    localStorage.setItem(\"token\", this.token);\n\n\t\t}\n\t    });\n    }\n\n    logout() {\n\tlocalStorage.setItem(\"token\", \"\");\n\tvar headers = new Headers();\n\theaders.append('Content-Type', 'application/json');\n\theaders.append('Accept', 'application/json');\n\theaders.append('Authorization', 'token ' + this.token);\n\n\treturn this.http.delete(this.backend.getUrl() + this.url + \"/\" + this.token + \"/\", new RequestOptions({ headers: headers }))\n\t    .do(() => {\n\t\tthis.isLoggedIn = false;\n\t\tthis.token = \"\";\n\t    })\n\t\t.catch(this.httpServiceError.handleError);\n    }\n\n    signin(email, pwd): Observable<User> {\n\tvar headers = new Headers();\n\tvar body = JSON.stringify({ email:email, password:pwd });\n\theaders.append('Content-Type', 'application/json');\n\theaders.append('Accept', 'application/json');\n\treturn this.http.post(this.backend.getUrl() + \"/users/\", body, new RequestOptions({ headers: headers }))\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    getToken() {\n\treturn this.token;\n    }\n}\n"]}
{"version":3,"file":"programs.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/programs.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, forwardRef, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { User } from './user.model';\nimport { AlertsService } from './alerts.service';\nimport { HttpServiceError } from './http-service-error.class'\nimport { Api } from './api.service'\nimport { BackgroundService } from './background.service';\n\n@Injectable()\nexport class ProgramsService {\n    @Output() cacheTimeout = new EventEmitter();\n\n    private programListObservable = null;\n    private cacheTimestamp = 0;\n    private cacheDuration = 1 * 60;\n    private timerId = -1;\n\n    constructor (private httpServiceError: HttpServiceError,\n\t\t private api: Api,\n\t\t private alertsService: AlertsService,\n\t\t @Inject(forwardRef(()  => BackgroundService)) private backgroundService: BackgroundService\n\t\t) {}\n\n    private url = \"/uprog/\";\n    \n    getProgramsList(): Observable<any> {\n\tthis.checkCacheTimestamp();\n\tif (this.programListObservable === null) {\n\t    this.programListObservable = this.api.get(this.url)\n\t\t.cache()\n\t\t.map(data => data.json())\n\t\t.catch(this.httpServiceError.handleError).do(() => this.updateCacheTimestamp());\n\t}\n\treturn this.programListObservable;\n    }\n\n    getProgramsDetail(id): Observable<any> {\n\treturn this.api.get(this.url + id + \"/\")\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    updateProgramsDetail(id, obj): Observable<any> {\n\tvar body = JSON.stringify(obj);\n\n\tthis.discardCache();\n\treturn this.api.patch(this.url + id + \"/\", body)\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    createProgram(obj): Observable<any> {\n\tvar body = JSON.stringify(obj);\n\n\tthis.discardCache();\n\treturn this.api.post(this.url, body)\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    deleteProgram(id): Observable<any> {\n\tthis.discardCache();\n\n\treturn this.api.delete(this.url + id + \"/\")\n\t    .map(data => {\n\t\tif (!data.ok)\n\t\t    return data.json()\n\t\treturn data;\n\t    })\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    discardCache() {\n\tthis.cacheTimestamp = 0;\n\tthis.alertsService.discardCache();\n\tthis.backgroundService.update();\n    }\n\n    updateCacheTimestamp() {\n\tthis.cacheTimestamp = new Date().getTime() / 1000;\n\tif (this.timerId != -1)\n\t    clearTimeout(this.timerId);\n\tthis.timerId = setTimeout(\n\t    () => {\n\t\tthis.checkCacheTimestamp()\n\t    },\n\t    this.cacheDuration * 1000\n\t);\n    }\n\n    checkCacheTimestamp() {\n\tlet now = new Date().getTime() / 1000;\n\tif (now - this.cacheTimestamp >= this.cacheDuration\n\t    && this.programListObservable !== null) {\n\t    this.programListObservable = null;\n\t    this.cacheTimeout.emit(null)\n\t}\n    }\n\n    trigerEmitTimeout() {\n\tthis.discardCache();\n\tthis.checkCacheTimestamp();\n    }\n}\n"]}
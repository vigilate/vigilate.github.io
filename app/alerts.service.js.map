{"version":3,"file":"alerts.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/alerts.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, forwardRef, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { User } from './user.model';\nimport { HttpServiceError } from './http-service-error.class'\nimport { Api } from './api.service'\nimport { BackgroundService } from './background.service';\n\n@Injectable()\nexport class AlertsService {\n    @Output() cacheTimeout = new EventEmitter();\n\n    private alertsListObservable = null;\n    private cacheTimestamp = 0;\n    private cacheDuration = 1 * 60;\n    private timerId = -1;\n\n    constructor (private httpServiceError: HttpServiceError,\n\t\t private api: Api,\n\t\t private backgroundService: BackgroundService\n\t\t) {}\n\n    private url = \"/alerts/\";\n\n    getAlertsList(): Observable<any> {\n\tthis.checkCacheTimestamp();\n\tif (this.alertsListObservable === null) {\n\t    this.alertsListObservable = this.api.get(this.url)\n\t\t.cache()\n\t\t.map(data => data.json())\n\t\t.catch(this.httpServiceError.handleError).do(() => this.updateCacheTimestamp());\n\t}\n\treturn this.alertsListObservable;\n    }\n\n    markRead(id): Observable<any> {\n\treturn this.api.get(this.url + id + \"/mark_read/\")\n\t    .cache()\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    markUnread(id): Observable<any> {\n\treturn this.api.get(this.url + id + \"/mark_unread/\")\n\t    .cache()\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    markAllRead(): Observable<any> {\n\treturn this.api.get(this.url + \"mark_all_read/\")\n\t    .cache()\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    markAllUnread(): Observable<any> {\n\treturn this.api.get(this.url + \"mark_all_unread/\")\n\t    .cache()\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n\n    getAlertsDetail(id): Observable<any> {\n\treturn this.api.get(this.url + id + \"/\")\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    discardCache() {\n\tthis.cacheTimestamp = 0;\n\tthis.backgroundService.update();\n    }\n\n    updateCacheTimestamp() {\n\tthis.cacheTimestamp = new Date().getTime() / 1000;\n\tif (this.timerId != -1)\n\t    clearTimeout(this.timerId);\n\n\tthis.timerId = setTimeout(\n\t    () => {\n\t\tthis.checkCacheTimestamp()\n\t    },\n\t    this.cacheDuration * 1000\n\t);\n    }\n\n    checkCacheTimestamp() {\n\tlet now = new Date().getTime() / 1000;\n\tif (now - this.cacheTimestamp >= this.cacheDuration\n\t    && this.alertsListObservable !== null) {\n\t    this.alertsListObservable = null;\n\t    this.cacheTimeout.emit(null)\n\t}\n    }\n\n    trigerEmitTimeout() {\n\tthis.discardCache();\n\tthis.checkCacheTimestamp();\n    }\n}\n"]}
{"version":3,"file":"auth.service.spec.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/auth.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  beforeEach, beforeEachProviders,\n  describe, xdescribe,\n  expect, it, xit,\n  async, inject\n} from '@angular/core/testing';\n\nimport { BaseRequestOptions, Response, ResponseOptions, Http } from '@angular/http';\nimport { MockBackend, MockConnection } from '@angular/http/testing';\nimport { provide } from '@angular/core';\nimport 'app/rxjs-operators'\n\nimport { User } from './user.model';\nimport { AuthService } from './auth.service';\nimport { HttpServiceError } from './http-service-error.class'\n\ndescribe('AuthService', () => {\n\n    beforeEachProviders(() => [\n\tAuthService,\n\tHttpServiceError,\n\tBaseRequestOptions,\n\tMockBackend,\n\tprovide(Http, {\n\t    useFactory: (backend: MockBackend, defaultOptions: BaseRequestOptions) => {\n\t\treturn new Http(backend, defaultOptions);\n\t    },\n\t    deps: [MockBackend, BaseRequestOptions]\n\t})\n    ]);\n\n    beforeEach(() => {\n\tthis.email = \"UserA@a.com\";\n\tthis.pwd = \"PwdA\";\n\n\tthis.baseResponseGood = new Response(new ResponseOptions(\n\t    {\n\t\tstatus: 200,\n\t\tbody: JSON.stringify(\n\t\t[\n\t\t    {\n\t\t\t\"id\":1,\n\t\t\t\"email\": this.email,\n\t\t\t\"password\":\"hash\",\n\t\t\t\"user_type\":0,\n\t\t\t\"contrat\":0,\n\t\t\t\"id_dealer\":0\n\t\t    }\n\t\t])\n\t    }\n\t));\n\n\tthis.baseResponseBadEmail = new Response(new ResponseOptions(\n\t    {\n\t\tstatus: 401,\n\t\tbody: JSON.stringify(\n\t\t{\n\t\t    \"detail\": \"No such user\"\n\t\t}),\n\t    } \n\t));\n\n\n\tthis.baseResponseBadPassword = new Response(new ResponseOptions(\n\t    {\n\t\tstatus: 401,\n\t\tbody: JSON.stringify(\n\t\t{\n\t\t    \"detail\": \"Wrong password\"\n\t\t}),\n\t    } \n\t));\n\n    });\n\n    \n\n    it('must not be connected before logging in',\n       inject([AuthService], (authService: AuthService, backend: MockBackend) => {\n\t   expect(authService.isLoggedIn).toBe(false);\n       })\n      );\n\n    it('must return user object',\n       inject([AuthService, MockBackend], (authService: AuthService, backend: MockBackend) => {\n\t   backend.connections.subscribe((c: MockConnection) => c.mockRespond(this.baseResponseGood));\n\n\t   authService.login(this.email, this.pwd).subscribe((res: User) => {\n\t       expect(res[0][\"email\"]).toBe(this.email);\n\t   });\n       })\n      );\n\n    \n    it('must be connected after successfull logging in',\n       inject([AuthService, MockBackend], (authService: AuthService, backend: MockBackend) => {\n\t   backend.connections.subscribe((c: MockConnection) => c.mockRespond(this.baseResponseGood));\n\n\t   authService.login(this.email, this.pwd).subscribe((res: User) => {\n\t       expect(authService.isLoggedIn).toBe(true);\n\t   });\n       })\n      );\n\n\n    it('must not be connected after bad email',\n       inject([AuthService, MockBackend], (authService: AuthService, backend: MockBackend) => {\n\t   backend.connections.subscribe((c: MockConnection) => c.mockRespond(this.baseResponseBadEmail));\n\n\t   authService.login(this.email, this.pwd).subscribe((res: User) => {\n\t       expect(authService.isLoggedIn).toBe(false);\n\t   });\n       })\n      );\n\n\n    it('must not be connected after bad password',\n       inject([AuthService, MockBackend], (authService: AuthService, backend: MockBackend) => {\n\t   backend.connections.subscribe((c: MockConnection) => c.mockRespond(this.baseResponseBadPassword));\n\n\t   authService.login(this.email, this.pwd).subscribe((res: User) => {\n\t       expect(authService.isLoggedIn).toBe(false);\n\t   });\n       })\n      );\n\n\n\n});\n"]}
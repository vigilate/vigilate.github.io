{"version":3,"file":"validation.class.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/validation.class.ts"],"names":[],"mappings":";AAMA;IAAA;IAMA,CAAC;IALU,yBAAU,GAAjB,UAAkB,OAAgB;QACrC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,IAAG,EAAE,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;YAC9E,MAAM,CAAC,IAAI,CAAC;QAChB,MAAM,CAAC,EAAC,YAAY,EAAE,IAAI,EAAC,CAAC;IACzB,CAAC;IACL,qBAAC;AAAD,CAAC,AAND,IAMC;AANY,sBAAc,iBAM1B,CAAA;AAEY,sBAAc,GAAG,UAAC,IAAI,EAAE,WAAW;IAC5C,MAAM,CAAC,UAAC,OAAe;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;YAC9D,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC;IACT,CAAC,CAAC;AACN,CAAC,CAAC;AAEW,wBAAgB,GAAG,UAAC,IAAI,EAAE,WAAW;IAC9C,MAAM,CAAC,UAAC,OAAe;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,CAAC,sBAAsB,EAAE,CAAC;QAC/C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACT,CAAC,CAAC;AACN,CAAC,CAAC;AAEF;IAAA;IAUA,CAAC;IATU,sBAAO,GAAd,UAAe,OAAgB;QAClC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC;YAC7C,MAAM,CAAC,IAAI,CAAC;QAEhB,IAAI,EAAE,GAAG,wJAAwJ,CAAC;QAClK,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC;QAChB,MAAM,CAAC,EAAC,cAAc,EAAE,IAAI,EAAC,CAAC;IAC3B,CAAC;IACL,qBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,sBAAc,iBAU1B,CAAA","sourcesContent":["import { Control } from \"@angular/common\";\n\ninterface ValidationResult {\n    [key:string]:any;\n}\n\nexport class PhoneValidator { \n    static isPrefixed(control: Control): ValidationResult { \n\tif (control.value !=\"\" && control.value != null && control.value.charAt(0) == \"+\")\n\t    return null;\n\treturn {\"isPrefixed\": true};\n    }\n}\n\nexport const MatchValidator = (ctrl, toBeMatched) => {\n    return (control:Control) => {\n\tif (ctrl[toBeMatched] && control.value != ctrl[toBeMatched].value)\n\t    return {\"match\": true};\n\treturn null;\n    };\n};\n\nexport const TriggerValidator = (ctrl, toBeMatched) => {\n    return (control:Control) => {\n\tif (ctrl[toBeMatched]) {\n\t    ctrl[toBeMatched].updateValueAndValidity();\n\t}\n\treturn null;\n    };\n};\n\nexport class EmailValidator { \n    static isValid(control: Control): ValidationResult {\n\tif (control.value == \"\" || control.value == null)\n\t    return null;\n\t\n\tvar re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\tif (re.test(control.value))\n\t    return null;\n\treturn {\"isValidEmail\": true};\n    }\n}\n"]}
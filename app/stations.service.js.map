{"version":3,"file":"stations.service.js","sourceRoot":"","sources":["../home/vigilate/frontend/frontend/tmp/broccoli_type_script_compiler-input_base_path-tkvoKOOh.tmp/0/src/app/stations.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { User } from './user.model';\nimport { UserService } from './user.service';\nimport { HttpServiceError } from './http-service-error.class'\nimport { Api } from './api.service';\nimport { ProgramsService } from './programs.service';\nimport { BackgroundService } from './background.service';\n\n@Injectable()\nexport class StationsService {\n\n    private stationsListObservable = null;\n\n    constructor (private userService: UserService,\n\t\t private httpServiceError: HttpServiceError,\n\t\t private api: Api,\n\t\t private programsService: ProgramsService,\n\t\t private backgroundService: BackgroundService\n\t\t) {}\n\n    private url = \"/stations/\";\n\n    getStationsList(): Observable<any> {\n\tif (this.stationsListObservable === null) {\n\t    this.stationsListObservable = this.api.get(this.url)\n\t\t.cache()\n\t\t.map(data => data.json())\n\t\t.catch(this.httpServiceError.handleError);\n\t}\n\treturn this.stationsListObservable;\n    }\n\n    getStationsDetail(id): Observable<any> {\n\treturn this.api.get(this.url + id + \"/\")\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    updateStationDetail(id, obj): Observable<any> {\n\tvar body = JSON.stringify(obj);\n\n\tthis.discardCache();\n\treturn this.api.patch(this.url + id + \"/\", body)\n\t    .map(data => data.json())\n\t    .catch(this.httpServiceError.handleError);\n    }\n    \n    createStation(name): Observable<any> {\n\tvar body = JSON.stringify({ name:name, user:this.userService.user.id });\n\n\treturn this.api.post(this.url, body)\n\t    .map(data => data.json())\n\t    .do(() => {\n\t\tthis.programsService.discardCache()\n\t    })\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    deleteStation(id): Observable<any> {\n\treturn this.api.delete(this.url + id + \"/\")\n\t    .do(() => {\n\t\tthis.programsService.discardCache()\n\t    })\n\t    .catch(this.httpServiceError.handleError);\n    }\n\n    discardCache() {\n\tthis.stationsListObservable = null;\n\tthis.backgroundService.update();\n    }\n}\n"]}